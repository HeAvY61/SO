#include <iostream>
#include <unistd.h>
#include <cstring>
#include <cstdlib>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <ctime>
#include <semaphore.h>

using namespace std;

#define DIMENS 20
#define SHM_KEY 1122
#define SHM_SIZE 1024

sem_t mutex;

// Funcție pentru oglindirea unui număr
int oglindit(int nr) {
    int og = 0;
    while (nr != 0) {
        og = og * 10 + nr % 10;
        nr /= 10;
    }
    return og;
}

// Conversie număr întreg în șir de caractere
char* converteste_la_char(int nr) {
    char* x = new char[DIMENS];
    snprintf(x, DIMENS, "%d", nr);
    return x;
}

// Conversie șir de caractere în număr întreg
int converteste_la_int(char x[DIMENS]) {
    return atoi(x);
}

int main() {
    void* shared_mem;
    int shmid;
    
    // Crearea memoriei partajate
    shmid = shmget(SHM_KEY, SHM_SIZE, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("Eroare la crearea memoriei partajate");
        return EXIT_FAILURE;
    }
    cout << "Cheia pentru memoria partajată: " << shmid << endl;

    // Atașarea memoriei partajate
    shared_mem = shmat(shmid, NULL, 0);
    if (shared_mem == (void*)-1) {
        perror("Eroare la atașarea memoriei partajate");
        return EXIT_FAILURE;
    }
    printf("Proces atașat la adresa %p\n", shared_mem);

    // Inițializarea semaforului
    if (sem_init(&mutex, 1, 1) == -1) {
        perror("Eroare la inițializarea semaforului");
        return EXIT_FAILURE;
    }

    // Inițializarea datelor din memoria partajată
    int continut_crt_mem = 0;
    char s[DIMENS];
    strcpy(s, converteste_la_char(continut_crt_mem));
    memcpy(shared_mem, s, DIMENS);

    srand(time(0)); // Inițializarea generatorului de numere aleatoare
    int pid = fork(); // Crearea procesului copil

    if (pid == -1) {
        perror("Eroare la crearea procesului copil");
        return EXIT_FAILURE;
    }

    while (continut_crt_mem <= 1000) {
        int nr_rand = rand() % 2 + 1;
        if (nr_rand == 2) {
            sem_wait(&mutex); // Rezervarea semaforului

            continut_crt_mem = converteste_la_int((char*)shared_mem);
            continut_crt_mem++;
            strcpy(s, converteste_la_char(continut_crt_mem));
            memcpy(shared_mem, s, DIMENS);

            if (pid == 0) {
                cout << "Procesul copil:\n";
            } else {
                cout << "Procesul părinte:\n";
            }
            printf("    A citit din memorie: %s\n", (char*)shared_mem);
            printf("    A scris în memorie: %s\n", s);

            sem_post(&mutex); // Eliberarea semaforului
        }
    }

    // Distrugerea semaforului
    if (sem_destroy(&mutex) == -1) {
        perror("Eroare la distrugerea semaforului");
        return EXIT_FAILURE;
    }

    // Dezatașarea și ștergerea memoriei partajate
    if (shmdt(shared_mem) == -1) {
        perror("Eroare la dezatașarea memoriei partajate");
        return EXIT_FAILURE;
    }
    if (shmctl(shmid, IPC_RMID, NULL) == -1) {
        perror("Eroare la ștergerea memoriei partajate");
        return EXIT_FAILURE;
    }

    return 0;
}
